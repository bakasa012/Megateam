{"version":3,"sources":["views/TableData/components/Header/Header.js","views/TableData/components/Results/Results.js","views/TableData/TableData.js"],"names":["useStyles","makeStyles","root","Header","props","className","rest","classes","clsx","Grid","alignItems","container","justify","spacing","item","Typography","component","gutterBottom","variant","Button","color","theme","filterButton","marginRight","content","padding","inner","minWidth","actions","justifyContent","Results","orders","useState","selectedOrders","setSelectedOrders","page","setPage","rowsPerPage","setRowsPerPage","paymentStatusColors","canceled","colors","grey","pending","orange","completed","green","rejected","red","length","Math","ceil","Card","CardHeader","action","title","Divider","CardContent","Table","TableHead","TableRow","TableCell","Checkbox","checked","indeterminate","onChange","event","target","map","order","id","align","TableBody","slice","selected","indexOf","selectedIndex","newSelectedOrders","concat","handleSelectOne","value","payment","ref","moment","created_at","format","customer","name","method","currency","total","status","RouterLink","size","to","CardActions","TablePagination","count","onChangePage","onChangeRowsPerPage","rowsPerPageOptions","defaultProps","marginTop","TableData","setOrders","useEffect","mounted","axios","get","then","response","data"],"mappings":"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","file":"static/js/10.44a19016.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from \"prop-types\";\r\nimport clsx from \"clsx\";\r\nimport { makeStyles } from \"@material-ui/styles\";\r\nimport { Grid, Typography, Button } from '@material-ui/core';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    root: {}\r\n}));\r\n\r\nconst Header = (props) => {\r\n    const { className, ...rest } = props;\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div\r\n            {...rest}\r\n            className={clsx(classes.root, className)}\r\n        >\r\n            <Grid\r\n                alignItems=\"flex-end\"\r\n                container\r\n                justify=\"space-between\"\r\n                spacing={3}\r\n            >\r\n                <Grid item>\r\n                    <Typography\r\n                        component=\"h2\"\r\n                        gutterBottom\r\n                        variant=\"overline\"\r\n                    >DataTable</Typography>\r\n\r\n                    <Typography\r\n                        component=\"h1\"\r\n                        variant=\"h3\"\r\n                    >Orders</Typography>\r\n                </Grid>\r\n                <Grid item>\r\n                    <Button color=\"primary\" variant=\"contained\">\r\n                        Add\r\n                    </Button>\r\n                </Grid>\r\n\r\n            </Grid>\r\n        </div>\r\n    );\r\n};\r\nHeader.propTypes = {\r\n    className: PropTypes.string\r\n};\r\n\r\nexport default Header;","import React, { useState } from 'react';\r\nimport { Link as RouterLink } from 'react-router-dom';\r\nimport clsx from 'clsx';\r\nimport moment from 'moment';\r\nimport PropTypes from 'prop-types';\r\nimport PerfectScrollbar from 'react-perfect-scrollbar';\r\nimport { makeStyles } from '@material-ui/styles';\r\nimport {\r\n  Button,\r\n  Card,\r\n  CardActions,\r\n  CardContent,\r\n  CardHeader,\r\n  Checkbox,\r\n  Divider,\r\n  Typography,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableHead,\r\n  TablePagination,\r\n  TableRow,\r\n  colors\r\n} from '@material-ui/core';\r\n\r\nimport { Label, GenericMoreButton, TableEditBar } from 'components';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {},\r\n  filterButton: {\r\n    marginRight: theme.spacing(2)\r\n  },\r\n  content: {\r\n    padding: 0\r\n  },\r\n  inner: {\r\n    minWidth: 1150\r\n  },\r\n  actions: {\r\n    padding: theme.spacing(0, 1),\r\n    justifyContent: 'flex-end'\r\n  }\r\n}));\r\n\r\nconst Results = props => {\r\n  const { className, orders, ...rest } = props;\r\n\r\n  const classes = useStyles();\r\n\r\n  const [selectedOrders, setSelectedOrders] = useState([]);\r\n  const [page, setPage] = useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = useState(10);\r\n\r\n  const handleSelectAll = event => {\r\n    const selectedOrders = event.target.checked\r\n      ? orders.map(order => order.id)\r\n      : [];\r\n\r\n    setSelectedOrders(selectedOrders);\r\n  };\r\n\r\n  const handleSelectOne = (event, id) => {\r\n    const selectedIndex = selectedOrders.indexOf(id);\r\n    let newSelectedOrders = [];\r\n\r\n    if (selectedIndex === -1) {\r\n      newSelectedOrders = newSelectedOrders.concat(selectedOrders, id);\r\n    } else if (selectedIndex === 0) {\r\n      newSelectedOrders = newSelectedOrders.concat(selectedOrders.slice(1));\r\n    } else if (selectedIndex === selectedOrders.length - 1) {\r\n      newSelectedOrders = newSelectedOrders.concat(selectedOrders.slice(0, -1));\r\n    } else if (selectedIndex > 0) {\r\n      newSelectedOrders = newSelectedOrders.concat(\r\n        selectedOrders.slice(0, selectedIndex),\r\n        selectedOrders.slice(selectedIndex + 1)\r\n      );\r\n    }\r\n\r\n    setSelectedOrders(newSelectedOrders);\r\n  };\r\n\r\n  const handleChangePage = (event, page) => {\r\n    setPage(page);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = event => {\r\n    setRowsPerPage(event.target.value);\r\n  };\r\n\r\n  const paymentStatusColors = {\r\n    canceled: colors.grey[600],\r\n    pending: colors.orange[600],\r\n    completed: colors.green[600],\r\n    rejected: colors.red[600]\r\n  };\r\n\r\n  return (\r\n    <div\r\n      {...rest}\r\n      className={clsx(classes.root, className)}\r\n    >\r\n      <Typography\r\n        color=\"textSecondary\"\r\n        gutterBottom\r\n        variant=\"body2\"\r\n      >\r\n        {orders.length} Records found. Page {page + 1} of{' '}\r\n        {Math.ceil(orders.length / rowsPerPage)}\r\n      </Typography>\r\n      <Card>\r\n        <CardHeader\r\n          action={<GenericMoreButton />}\r\n          title=\"Orders\"\r\n        />\r\n        <Divider />\r\n        <CardContent className={classes.content}>\r\n          <PerfectScrollbar>\r\n            <div className={classes.inner}>\r\n              <Table>\r\n                <TableHead>\r\n                  <TableRow>\r\n                    <TableCell padding=\"checkbox\">\r\n                      <Checkbox\r\n                        checked={selectedOrders.length === orders.length}\r\n                        color=\"primary\"\r\n                        indeterminate={\r\n                          selectedOrders.length > 0 &&\r\n                          selectedOrders.length < orders.length\r\n                        }\r\n                        onChange={handleSelectAll}\r\n                      />\r\n                    </TableCell>\r\n                    <TableCell>Ref</TableCell>\r\n                    <TableCell>Customer</TableCell>\r\n                    <TableCell>Method</TableCell>\r\n                    <TableCell>Total</TableCell>\r\n                    <TableCell>Status</TableCell>\r\n                    <TableCell align=\"right\">Actions</TableCell>\r\n                  </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                  {orders.slice(0, rowsPerPage).map(order => (\r\n                    <TableRow\r\n                      key={order.id}\r\n                      selected={selectedOrders.indexOf(order.id) !== -1}\r\n                    >\r\n                      <TableCell padding=\"checkbox\">\r\n                        <Checkbox\r\n                          checked={selectedOrders.indexOf(order.id) !== -1}\r\n                          color=\"primary\"\r\n                          onChange={event => handleSelectOne(event, order.id)}\r\n                          value={selectedOrders.indexOf(order.id) !== -1}\r\n                        />\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        {order.payment.ref}\r\n                        <Typography variant=\"body2\">\r\n                          {moment(order.created_at).format(\r\n                            'DD MMM YYYY | hh:mm'\r\n                          )}\r\n                        </Typography>\r\n                      </TableCell>\r\n\r\n                      <TableCell>{order.customer.name}</TableCell>\r\n                      <TableCell>{order.payment.method}</TableCell>\r\n                      <TableCell>\r\n                        {order.payment.currency}\r\n                        {order.payment.total}\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        <Label\r\n                          color={paymentStatusColors[order.payment.status]}\r\n                          variant=\"outlined\"\r\n                        >\r\n                          {order.payment.status}\r\n                        </Label>\r\n                      </TableCell>\r\n                      <TableCell align=\"right\">\r\n                        <Button\r\n                          color=\"primary\"\r\n                          component={RouterLink}\r\n                          size=\"small\"\r\n                          to={'/management/orders/1'}\r\n                          variant=\"outlined\"\r\n                        >\r\n                          View\r\n                        </Button>\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  ))}\r\n                </TableBody>\r\n              </Table>\r\n            </div>\r\n          </PerfectScrollbar>\r\n        </CardContent>\r\n        <CardActions className={classes.actions}>\r\n          <TablePagination\r\n            component=\"div\"\r\n            count={orders.length}\r\n            onChangePage={handleChangePage}\r\n            onChangeRowsPerPage={handleChangeRowsPerPage}\r\n            page={page}\r\n            rowsPerPage={rowsPerPage}\r\n            rowsPerPageOptions={[5, 10, 25]}\r\n          />\r\n        </CardActions>\r\n      </Card>\r\n      <TableEditBar selected={selectedOrders} />\r\n    </div>\r\n  );\r\n};\r\n\r\nResults.propTypes = {\r\n  className: PropTypes.string,\r\n  orders: PropTypes.array.isRequired\r\n};\r\n\r\nResults.defaultProps = {\r\n  orders: []\r\n};\r\n\r\nexport default Results;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { makeStyles } from \"@material-ui/styles\";\r\n\r\nimport axios from 'utils/axios';\r\nimport { Page } from \"components\";\r\nimport { Header, Results } from \"./components\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        padding: theme.spacing(3),\r\n    },\r\n    Results: {\r\n        marginTop: theme.spacing(3)\r\n    }\r\n}));\r\n\r\nconst TableData = (props) => {\r\n    const classes = useStyles();\r\n    const [orders, setOrders] = useState([]);\r\n\r\n    useEffect(() => {\r\n        let mounted = true;\r\n    \r\n        const fetchOrders = () => {\r\n            axios.get('/api/orders').then(response => {\r\n                if (mounted) {\r\n                    setOrders(response.data.orders);\r\n                }\r\n            });\r\n        };\r\n    \r\n        fetchOrders();\r\n    \r\n        return () => {\r\n            mounted = false;\r\n        };\r\n    }, []);\r\n    return (\r\n        <Page\r\n            className={classes.root}\r\n            title=\"Table Data\"\r\n        >\r\n            <Header />\r\n            <Results\r\n                className={classes.Results}\r\n                orders={orders}\r\n            />\r\n        </Page>\r\n    );\r\n};\r\n\r\nexport default TableData;"],"sourceRoot":""}